apiVersion: apps/v1
kind: Deployment
metadata:
  name: service_name    # service_name to be replaced with the uniqueId of the project
  labels:
    app: service_name
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service_name
  template:
    metadata:
      labels:
        app: service_name
    spec:
      volumes:
        - name: workspace-volume    # to bring the initial base code from R2 and even after refresh by user, it will be present in the volume as we continously push the code to R2
          emptyDir: {}
      initContainers:
        - name: copy-s3-resources
          image: amazon/aws-cli
          command: ["/bin/sh", "-c"]
          args:
            - > # base code prefix is templated at runtime
              aws s3 cp "s3://codevo/BASE_CODE_PREFIX" /workspace/ --recursive --endpoint-url $R2_ENDPOINT &&
              echo "Resources copied from S3";
          env:
            - name: AWS_ACCESS_KEY_ID
              value: $R2_ACCESS_KEY_ID
            - name: AWS_SECRET_ACCESS_KEY
              value: $R2_SECRET_ACCESS_KEY
            
          # env:
          #   - name: AWS_ACCESS_KEY_ID
          #     valueFrom:
          #       secretKeyRef:
          #         name: server-credentials
          #         key: R2_ACCESS_KEY_ID
          #   - name: AWS_SECRET_ACCESS_KEY
          #     valueFrom:
          #       secretKeyRef:
          #         name: server-credentials
          #         key: R2_SECRET_ACCESS_KEY

          # envFrom:
          #   - secretRef:
          #       name: aws-credentials
                # run below command to create the secret in CLI
                # kubectl create secret generic aws-credentials \
                # --from-literal=AWS_ACCESS_KEY_ID=your_aws_key_id \
                # --from-literal=AWS_SECRET_ACCESS_KEY=your_aws_secret
          volumeMounts:
            - name: workspace-volume 
              mountPath: /workspace
      containers:
        - name: runner
          image: RUNNER_IMAGE    # templated at runtime
          ports:
            - containerPort: 3000   # for terminal,chats,other stuffs
            - containerPort: 3001   # for preview
          env:   # Only needed if runner needs some envs
            - name: WORKER_URL
              value: "http://localhost:3002"
            - name: PORT
              value: "3000"
            - name: WORKSPACE_PATH
              value: "/workspace"
            - name: BACKEND_URL
              value: "http://server:4000/api/v1"
            - name: DOMAIN
              value: "codevo.live"
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "1"
              memory: "500Mi"
              ephemeral-storage: "500Mi"
            limits:
              cpu: "1"
              memory: "500Mi"
              ephemeral-storage: "500Mi"
        # This container will be accessed by end user
        - name: worker
          image: extremecoder01/worker    #change here
          ports:
            - containerPort: 3002
          envFrom:
            - secretRef:
                name: worker-env-secret   #change here
                # run below command to create the secret in CLI
                # kubectl create secret generic worker-env-secret --from-env-file=.env
          volumeMounts:
            - name: workspace-volume
              mountPath: /workspace
          resources:
            requests:
              cpu: "1"
              memory: "500Mi"
              ephemeral-storage: "500Mi" 
            limits:
              cpu: "1"
              memory: "500Mi"
              ephemeral-storage: "500Mi"

---
apiVersion: v1
kind: Service
metadata:
  name: service_name  # ← Must be same as projectId
spec:
  clusterIP: None  # ← This makes it a headless service
  selector:
    app: service_name
  ports:
    - protocol: TCP
      name: user    # will give access to runner
      port: 3000
      targetPort: 3000
    - protocol: TCP
      name: preview    # will give access to runner
      port: 3001
      targetPort: 3001


---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata: 
  name: service_name
  annotations:
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/websocket-services: preview-service
spec:
  ingressClassName: nginx
  rules:
  - host: service_name.codevo.live     # change here
    http:
      paths:
      - path: /user/socket.io
        pathType: Prefix
        backend:
          service:
            name: service_name
            port:
              number: 3000
      - path: /preview
        pathType: Prefix
        backend:
          service:
            name: service_name         
            port:
              number: 3000 
      - path: /
        pathType: Prefix
        backend:
          service:
            name: service_name          
            port:
              number: 3001  

      